// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: api/proto/v1/portfolios.proto

package cryptowatchv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PortfoliosClient is the client API for Portfolios service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortfoliosClient interface {
	CreatePortfolio(ctx context.Context, in *CreatePortfolioReq, opts ...grpc.CallOption) (*wrapperspb.UInt64Value, error)
	Buy(ctx context.Context, in *BuySellReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Sell(ctx context.Context, in *BuySellReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Info(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoRes, error)
}

type portfoliosClient struct {
	cc grpc.ClientConnInterface
}

func NewPortfoliosClient(cc grpc.ClientConnInterface) PortfoliosClient {
	return &portfoliosClient{cc}
}

func (c *portfoliosClient) CreatePortfolio(ctx context.Context, in *CreatePortfolioReq, opts ...grpc.CallOption) (*wrapperspb.UInt64Value, error) {
	out := new(wrapperspb.UInt64Value)
	err := c.cc.Invoke(ctx, "/cryptowatch.Portfolios/CreatePortfolio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfoliosClient) Buy(ctx context.Context, in *BuySellReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/cryptowatch.Portfolios/Buy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfoliosClient) Sell(ctx context.Context, in *BuySellReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/cryptowatch.Portfolios/Sell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfoliosClient) Info(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoRes, error) {
	out := new(InfoRes)
	err := c.cc.Invoke(ctx, "/cryptowatch.Portfolios/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortfoliosServer is the server API for Portfolios service.
// All implementations must embed UnimplementedPortfoliosServer
// for forward compatibility
type PortfoliosServer interface {
	CreatePortfolio(context.Context, *CreatePortfolioReq) (*wrapperspb.UInt64Value, error)
	Buy(context.Context, *BuySellReq) (*emptypb.Empty, error)
	Sell(context.Context, *BuySellReq) (*emptypb.Empty, error)
	Info(context.Context, *InfoReq) (*InfoRes, error)
	mustEmbedUnimplementedPortfoliosServer()
}

// UnimplementedPortfoliosServer must be embedded to have forward compatible implementations.
type UnimplementedPortfoliosServer struct {
}

func (UnimplementedPortfoliosServer) CreatePortfolio(context.Context, *CreatePortfolioReq) (*wrapperspb.UInt64Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePortfolio not implemented")
}
func (UnimplementedPortfoliosServer) Buy(context.Context, *BuySellReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Buy not implemented")
}
func (UnimplementedPortfoliosServer) Sell(context.Context, *BuySellReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sell not implemented")
}
func (UnimplementedPortfoliosServer) Info(context.Context, *InfoReq) (*InfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedPortfoliosServer) mustEmbedUnimplementedPortfoliosServer() {}

// UnsafePortfoliosServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortfoliosServer will
// result in compilation errors.
type UnsafePortfoliosServer interface {
	mustEmbedUnimplementedPortfoliosServer()
}

func RegisterPortfoliosServer(s grpc.ServiceRegistrar, srv PortfoliosServer) {
	s.RegisterService(&Portfolios_ServiceDesc, srv)
}

func _Portfolios_CreatePortfolio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePortfolioReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfoliosServer).CreatePortfolio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cryptowatch.Portfolios/CreatePortfolio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfoliosServer).CreatePortfolio(ctx, req.(*CreatePortfolioReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Portfolios_Buy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuySellReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfoliosServer).Buy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cryptowatch.Portfolios/Buy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfoliosServer).Buy(ctx, req.(*BuySellReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Portfolios_Sell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuySellReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfoliosServer).Sell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cryptowatch.Portfolios/Sell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfoliosServer).Sell(ctx, req.(*BuySellReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Portfolios_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfoliosServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cryptowatch.Portfolios/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfoliosServer).Info(ctx, req.(*InfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Portfolios_ServiceDesc is the grpc.ServiceDesc for Portfolios service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Portfolios_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cryptowatch.Portfolios",
	HandlerType: (*PortfoliosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePortfolio",
			Handler:    _Portfolios_CreatePortfolio_Handler,
		},
		{
			MethodName: "Buy",
			Handler:    _Portfolios_Buy_Handler,
		},
		{
			MethodName: "Sell",
			Handler:    _Portfolios_Sell_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _Portfolios_Info_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/v1/portfolios.proto",
}
