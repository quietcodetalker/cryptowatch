// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: api/proto/v1/triggers.proto

package cryptowatchv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TriggersClient is the client API for Triggers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TriggersClient interface {
	Add(ctx context.Context, in *Req, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Remove(ctx context.Context, in *Req, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Subscribe(ctx context.Context, in *wrapperspb.UInt64Value, opts ...grpc.CallOption) (Triggers_SubscribeClient, error)
}

type triggersClient struct {
	cc grpc.ClientConnInterface
}

func NewTriggersClient(cc grpc.ClientConnInterface) TriggersClient {
	return &triggersClient{cc}
}

func (c *triggersClient) Add(ctx context.Context, in *Req, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/cryptowatch.Triggers/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggersClient) Remove(ctx context.Context, in *Req, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/cryptowatch.Triggers/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggersClient) Subscribe(ctx context.Context, in *wrapperspb.UInt64Value, opts ...grpc.CallOption) (Triggers_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Triggers_ServiceDesc.Streams[0], "/cryptowatch.Triggers/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &triggersSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Triggers_SubscribeClient interface {
	Recv() (*Token, error)
	grpc.ClientStream
}

type triggersSubscribeClient struct {
	grpc.ClientStream
}

func (x *triggersSubscribeClient) Recv() (*Token, error) {
	m := new(Token)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TriggersServer is the server API for Triggers service.
// All implementations must embed UnimplementedTriggersServer
// for forward compatibility
type TriggersServer interface {
	Add(context.Context, *Req) (*emptypb.Empty, error)
	Remove(context.Context, *Req) (*emptypb.Empty, error)
	Subscribe(*wrapperspb.UInt64Value, Triggers_SubscribeServer) error
	mustEmbedUnimplementedTriggersServer()
}

// UnimplementedTriggersServer must be embedded to have forward compatible implementations.
type UnimplementedTriggersServer struct {
}

func (UnimplementedTriggersServer) Add(context.Context, *Req) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedTriggersServer) Remove(context.Context, *Req) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedTriggersServer) Subscribe(*wrapperspb.UInt64Value, Triggers_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedTriggersServer) mustEmbedUnimplementedTriggersServer() {}

// UnsafeTriggersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TriggersServer will
// result in compilation errors.
type UnsafeTriggersServer interface {
	mustEmbedUnimplementedTriggersServer()
}

func RegisterTriggersServer(s grpc.ServiceRegistrar, srv TriggersServer) {
	s.RegisterService(&Triggers_ServiceDesc, srv)
}

func _Triggers_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggersServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cryptowatch.Triggers/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggersServer).Add(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Triggers_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggersServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cryptowatch.Triggers/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggersServer).Remove(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Triggers_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(wrapperspb.UInt64Value)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TriggersServer).Subscribe(m, &triggersSubscribeServer{stream})
}

type Triggers_SubscribeServer interface {
	Send(*Token) error
	grpc.ServerStream
}

type triggersSubscribeServer struct {
	grpc.ServerStream
}

func (x *triggersSubscribeServer) Send(m *Token) error {
	return x.ServerStream.SendMsg(m)
}

// Triggers_ServiceDesc is the grpc.ServiceDesc for Triggers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Triggers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cryptowatch.Triggers",
	HandlerType: (*TriggersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Triggers_Add_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _Triggers_Remove_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Triggers_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/proto/v1/triggers.proto",
}
